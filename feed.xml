<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://archern9.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://archern9.github.io/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2021-07-18T23:07:33+08:00</updated><id>https://archern9.github.io/feed.xml</id><title type="html">Archer’s Blog</title><subtitle>Archer's blog. I write about interesting technology things I come across while on an endeavour to improve my own productivity.</subtitle><entry><title type="html">I bundled FZF with my password store flow. Why does one operate without it?</title><link href="https://archern9.github.io/posts/expediting-pass-access-with-fzf/" rel="alternate" type="text/html" title="I bundled FZF with my password store flow. Why does one operate without it?" /><published>2020-08-23T23:21:00+08:00</published><updated>2021-07-18T21:05:33+08:00</updated><id>https://archern9.github.io/posts/expediting-pass-access-with-fzf</id><content type="html" xml:base="https://archern9.github.io/posts/expediting-pass-access-with-fzf/">&lt;p&gt;This post requires familiarity with &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;FZF&lt;/a&gt; and
*nix &lt;a href=&quot;https://www.passwordstore.org/&quot;&gt;PasswordStore (Pass)&lt;/a&gt;. Unlike my other
posts, I intend this to be a retrospective &amp;amp; my experience rather than a tutorial.&lt;/p&gt;

&lt;p&gt;I may not have violated rule number one of password management by storing
passwords in plain text but perhaps rule number two: Maintaining the same password
for each of my accounts because I found it cumbersome &amp;amp; impossible to maintain
different passwords for each service I access. Sometime ago, I stumbled upon
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pass&lt;/code&gt;. It took away the complexity of memorizing passwords and stores them
securely as an encrypted file. I quickly migrated my 25 odd account passwords and
though I took sometime to consider the architecture by which I wanted to store
them, I realised that an approach of a narrow &amp;amp; deep and shallow &amp;amp; wide tree
hierarchy increased my access time alike. The tree below is indicative, not my
primary hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-08-23-1.png&quot; alt=&quot;Tree Hierarchy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My flow requires access to some of my passwords multiple times a day and due to
the frequency, I usually kept a separate terminal window just for accessing pass.
I ended up over complicating the one thing that pass attempted to simplify. Not
to mention it was more time consuming because now I had to remember bits and
pieces of the tree hierarchy that I had just created and navigate through it to
get to my password. Yes, with time I got the hang of it but the experience wasn’t
as I hoped it’d be. Below is a benchmarking test of attempting to access 5 stored
passwords through the regular pass interface with a little help from ZSH. I
averaged &lt;strong&gt;34 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-08-23-2.gif&quot; alt=&quot;Benchmarking old API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I found FZF, I immediately realised these two programs could be paired up
for faster access. After all, FZF simply fuzzy finds objects and returns them as
a string. I found an AUR package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pass-clip&lt;/code&gt; by ibizaman - This is exactly what I
was looking for but with a more focussed approach. I stripped some elements from
the script to make it my own and extend support for OSX. The approach entailed
creation of a pass extension that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Traverses through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.password-store&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;Identifies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gpg&lt;/code&gt; saved passwords&lt;/li&gt;
  &lt;li&gt;Strips the path to make it readable&lt;/li&gt;
  &lt;li&gt;Lets the user fuzzy find passwords&lt;/li&gt;
  &lt;li&gt;Executes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pass show --clip&lt;/code&gt; command on the user selection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result was swifter access to one of my most frequently used resources and I
fail to understand why did I not use this from the beginning. As before, I
benchmarked this effort as well. I averaged just under &lt;strong&gt;23 seconds&lt;/strong&gt;. I added an
alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pass clip&lt;/code&gt; as a cherry on top.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-08-23-3.gif&quot; alt=&quot;Benchmarking new API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pass-clip&lt;/code&gt; project with OSX support may be found at my
&lt;a href=&quot;https://github.com/ArcherN9/pass-clip&quot;&gt;Github&lt;/a&gt; and the original AUR project
&lt;a href=&quot;https://github.com/ibizaman/pass-clip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>ArcherN9</name></author><category term="[&quot;Productivity&quot;]" /><category term="Unix" /><category term="Linux" /><category term="Mac" /><category term="Command Line" /><category term="FZF" /><category term="Password Store" /><summary type="html">This post requires familiarity with FZF and *nix PasswordStore (Pass). Unlike my other posts, I intend this to be a retrospective &amp;amp; my experience rather than a tutorial.</summary></entry><entry><title type="html">Make Integrations work for you: iOS Shortcuts app with Wireguard Randomizer</title><link href="https://archern9.github.io/posts/use-ios-shortcuts-with-wireguard-randomizer-for-easy-interface-modification/" rel="alternate" type="text/html" title="Make Integrations work for you: iOS Shortcuts app with Wireguard Randomizer" /><published>2020-07-05T22:34:21+08:00</published><updated>2021-07-18T21:05:33+08:00</updated><id>https://archern9.github.io/posts/use-ios-shortcuts-with-wireguard-randomizer-for-easy-interface-modification</id><content type="html" xml:base="https://archern9.github.io/posts/use-ios-shortcuts-with-wireguard-randomizer-for-easy-interface-modification/">&lt;p&gt;To complete this tutorial, a Wireguard Randomizer script is required. I recommend
reading &lt;a href=&quot;https://archern9.github.io/articles/2020/06/29/randomize-mullvad-interface-with-cron.html&quot;&gt;my post on setting up a Wireguard Randomizer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Integrations make life easier. I’ve had experiences setting up IFTTT integrations
for some of my use cases and an alternative to that is the iOS Shortcuts
application. It lets one create automated procedures that are executed by a
trigger (usually a button press from the app).&lt;/p&gt;

&lt;p&gt;I have iteratively been building a home lab for my diverse requirements primarily
driven by a Raspberry Pi 4 or a Pi Zero W. Of those requirements, one of them
dictated that I &lt;a href=&quot;https://archern9.github.io/articles/2020/06/28/route-pivpn-traffic-via-mullvad.html&quot;&gt;set up a PiVPN server that redirects the traffic to a commercial VPN&lt;/a&gt;.
However, this set up had a drawback. In contrast to the Mullvad desktop &amp;amp; mobile
applications which specifically inform the user which server the VPN is connected
to, what is the IP and what region the server resides in, my setup informs no
such thing. During the first few days I setup my PiVPN + Mullvad combo, I
developed a morning ritual. I would use the Termius application on my iPhone to
SSH into the server, and check which interface my setup was connected to using
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; command. This had scope for automation.&lt;/p&gt;

&lt;p&gt;I suggest viewing this YouTube video for comprehending
&lt;a href=&quot;https://www.youtube.com/watch?v=-NJAUmc4y-A&quot;&gt;what is the iOS Shortcuts application&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;understanding-shortcuts&quot;&gt;Understanding Shortcuts&lt;/h2&gt;

&lt;p&gt;Shortcuts created may be executed through three entry points.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, the shortcuts application of course where created shortcuts show up on
an endless dual-column list;&lt;/li&gt;
  &lt;li&gt;Second is a shortcuts app widget on the widget screen for swift access;&lt;/li&gt;
  &lt;li&gt;The third is via Siri. This gives the advantage of executing shortcuts even
without using the device. I suggest naming the shortcuts in such a way that
they’re easier to pronounce.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to note that a shortcut is a collection of multiple actions that
are executed sequentially to perform a task thereby automating it. (I took a while
to wrap my head around this. My initial understanding was each action is a
different shortcut &amp;amp; never got anywhere with my automation.)&lt;/p&gt;

&lt;h2 id=&quot;shortcut---what-is-my-ip&quot;&gt;Shortcut - What is my IP?&lt;/h2&gt;

&lt;p&gt;When on a VPN, searches for “ip address” on DuckDuckGo or access to a similar IP
revealing service are recurrent. Complexity is added when a raspberry pi is
running headless and does not have access to a browser.&lt;/p&gt;

&lt;p&gt;Open the shortcuts application on the iOS device and tap on the &lt;em&gt;Create Shortcut&lt;/em&gt;
card or the &lt;em&gt;plus&lt;/em&gt; icon on the top right corner. The new screen is where numerous
actions are collated. Tap on &lt;em&gt;Add Action&lt;/em&gt;, search for &amp;amp; select &lt;strong&gt;Run Script over
SSH&lt;/strong&gt;. This action, as the name states, connects to a server through SSH and
executes a series of BASH commands.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter the hostname of the Raspberry Pi or the IP address. If PiHole is installed
on the same server, just enter &lt;em&gt;pi.hole&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Port 22&lt;/li&gt;
  &lt;li&gt;The username &amp;amp; password of a user which can log in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the space provided at the bottom to enter bash commands, enter the following
(ignore the lines with # - They’re just for illustration):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# This returns a country name.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl https://am.i.mullvad.net/country&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Lookup IP positioning on the web to understand this one (and the previous?). The API returns a City name.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl https://am.i.mullvad.net/city&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# An alternative to this is https://am.i.mullvad.net/connected. That would warrant use of cut and other commands. I wanted to keep this simple.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl ifconfig.me&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# An echo at the end is the output of the script and the value is brought back to shortcut app for succeeding actions. This is important. A good addition are conditions - &quot;If mullvad is not connected to their servers, the echo statement should not suggest it is&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mullvad is currently connected to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$city&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$country&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; with IP &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add a new action, select &lt;em&gt;Scripting&lt;/em&gt;, scroll down to the &lt;em&gt;Notification&lt;/em&gt; section
and select &lt;em&gt;Show Result&lt;/em&gt;. The &lt;em&gt;Show Result&lt;/em&gt; section should be pre-populated with
&lt;em&gt;Show Shell Script Result&lt;/em&gt;. Either tap on the &lt;em&gt;Play&lt;/em&gt; icon on the bottom right to
test or save to run later. Remember to use a name that’s easier for Siri to
understand (because of dialect). I named mine, &lt;strong&gt;Check IP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-07-5-2.png&quot; alt=&quot;Lookup IP&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;shortcut---randomize&quot;&gt;Shortcut - Randomize&lt;/h2&gt;

&lt;p&gt;To re-iterate, follow &lt;a href=&quot;https://archern9.github.io/articles/2020/06/29/randomize-mullvad-interface-with-cron.html&quot;&gt;my post on setting up a Wireguard Randomizer&lt;/a&gt;
before attempting to create this shortcut. Our default setup for Randomizer is
to execute the script everyday, at 0400hrs in the morning. However, retaining the
ease to execute it at will is a bonus. This may be for various reasons -
Connections to the current server may be running slow. Paranoia may take over
and a server switch may be a whim.&lt;/p&gt;

&lt;p&gt;Follow the steps in the previous section to create the action &lt;em&gt;Run a script over
SSH&lt;/em&gt;. In the space provided at the bottom to enter bash commands, enter the
following.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# In contrast to the previous section, this implementation delegates logic to a shell script stored on the server and simply executes it. This is a good way to create complex shell scripts that may difficult to write on the app; It also enables portability. When the shortcut is shared &amp;amp; executed by numerous people in a household.&lt;/span&gt;
/opt/Wireguard-Randomizer./mullvad.sh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second action focusses on re-usability. Add a new action, search for &amp;amp; select &lt;em&gt;Shortcut&lt;/em&gt; and select &lt;em&gt;Run Shortcut&lt;/em&gt;. On the shortcut card, select the shortcut created above. I chose &lt;strong&gt;Check IP&lt;/strong&gt;. Either tap on the &lt;em&gt;Play&lt;/em&gt; icon on the bottom right to test or save to run later. Remember to use a name that’s easier for Siri to understand (because of dialect). I named mine &lt;strong&gt;Randomize Mullvad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-07-5-3.png&quot; alt=&quot;Randomize Mullvad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pro Tip: Go ahead and dictate Siri, “Hey Siri, Check IP” or “Hey Siri, Randomize 
Mullvad”.&lt;/p&gt;</content><author><name>ArcherN9</name></author><category term="[&quot;Linux&quot;]" /><category term="iOS" /><category term="Shortcuts" /><category term="PiVPN" /><category term="Wireguard" /><category term="Mullvad" /><category term="RaspberryPi" /><category term="Networking" /><summary type="html">To complete this tutorial, a Wireguard Randomizer script is required. I recommend reading my post on setting up a Wireguard Randomizer.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="src:/assets/img/2020-07-5-1.png" /><media:content medium="image" url="src:/assets/img/2020-07-5-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Randomize Mullvad Wireguard interface connection</title><link href="https://archern9.github.io/posts/randomize-mullvad-interface-with-cron/" rel="alternate" type="text/html" title="Randomize Mullvad Wireguard interface connection" /><published>2020-06-30T05:03:12+08:00</published><updated>2021-07-18T21:05:33+08:00</updated><id>https://archern9.github.io/posts/randomize-mullvad-interface-with-cron</id><content type="html" xml:base="https://archern9.github.io/posts/randomize-mullvad-interface-with-cron/">&lt;blockquote&gt;
  &lt;p&gt;In order to get identity hiding forward secrecy the suggestion is to have the client change its static pubkey often in order to de-link VPN sessions, in the event of a compromise of the server’s static private key. “Often” might be a time limit, a bandwidth limit, and events like reboot of the system, the app, new WiFi, new DHCP lease, or explicitly by the user. To provide the same properties as OpenVPN it should be enough to change pubkey every time the user does a connect/disconnect. &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://www.reddit.com/r/mullvadvpn/comments/gfsuph/i_wrote_a_script_to_automate_mullvad_server/fpwaixj?utm_source=share&amp;amp;utm_medium=web2x&quot;&gt;u/j0n17&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition, it is recommended to cyclically keep switching the VPN servers
everyday. Rotating the public key as a feature has not been implemented yet.
I shall update this guide when it is.&lt;/p&gt;

&lt;p&gt;I wrote a tiny shell script that picks a random Mullvad Wireguard interface from
a list and connects to it. For more information on what Wireguard interfaces
these are, please refer &lt;a href=&quot;https://archern9.github.io/articles/2020/06/28/route-pivpn-traffic-via-mullvad.html&quot;&gt;this post first&lt;/a&gt; and &lt;a href=&quot;https://mullvad.net/en/help/wireguard-and-mullvad-vpn/&quot;&gt;this guide from Mullvad&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-1-setup-dependencies&quot;&gt;Step 1: Setup Dependencies&lt;/h2&gt;

&lt;p&gt;In all probability, you should have these installed by default.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;iproute2 wireguard-dkms wireguard-tools
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2-clone-setup-and-test&quot;&gt;Step 2: Clone, setup and test&lt;/h2&gt;

&lt;p&gt;I prefer to keep my programs under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/&lt;/code&gt;. Though you could move it to any
location you’d prefer as long as file permissions are set properly. The
&lt;a href=&quot;https://github.com/ArcherN9/Wireguard-Interface-randomizer&quot;&gt;project is on my Github&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt/

&lt;span class=&quot;c&quot;&gt;# By default, the root group does not have write permissions on /opt. You'll need sudo access for executing this command.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;git clone https://github.com/ArcherN9/Wireguard-Interface-randomizer.git

&lt;span class=&quot;c&quot;&gt;# Usually, read and execution permissions for folders inside /opt/ are granted. If not, ensure that is setup first using chmod.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Wireguard-Interface-randomizer

&lt;span class=&quot;c&quot;&gt;# Use a text editor to modify/verify the parameters defined in the shell script first.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano mullvad.sh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-07-10-1.png&quot; alt=&quot;Mullvad Shell script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Verify the values of the following fields.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;mullvadVpnInterfaceRegex&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

  &lt;p&gt;Default regex used signifies that all interfaces identified should start with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mullvad-&lt;/code&gt; and may end with any word. If this is not accurate for your setup,
you may replace this with a regex of your choosing.
&lt;br /&gt;&lt;strong&gt;Pro Tip&lt;/strong&gt;: Depending on your geographical location, you may setup the
regex to ignore regions that are situated far away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;wireguardConfigurationDirectory&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

  &lt;p&gt;The default Wireguard directory where all wireguard interfaces reside. Highly
unlikely that you may need to modify this; But if it is the case, please
provide the absolute path where the Wireguard interfaces are situated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Test if the script functions as intended.&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt/Wireguard-Interface-randomizer
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./mullvad.sh

&lt;span class=&quot;c&quot;&gt;# If the script executes successfully, you should see an output similar to below&lt;/span&gt;
Cron is re-configuring the connected VPN.
System is currently connected to mullvad-lu1 and switching over to mullvad-us109.conf

&lt;span class=&quot;c&quot;&gt;# To alleviate skepticism, execute the following&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ip a
...
5: mullvad-us109: &amp;lt;POINTOPOINT,NOARP,UP,LOWER_UP&amp;gt; mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/none 
    inet x.x.x.x/x scope global mullvad-us109
       valid_lft forever preferred_lft forever
...

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://am.i.mullvad.net/connected
You are connected to Mullvad &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;server us109-wireguard&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Your IP address is x:x:x:x::x
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-setup-with-cron&quot;&gt;Step 3: Setup with Cron&lt;/h2&gt;

&lt;h3 id=&quot;dietpi&quot;&gt;DietPi&lt;/h3&gt;

&lt;p&gt;On a DietPi, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dietpi-cron&lt;/code&gt; utility is the simplest way to setup automatic
rotation at a convenient time. Executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo dietpi-cron&lt;/code&gt; should open a
similar window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-07-10-2.png&quot; alt=&quot;DietPi Crontab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select an appropriate cron type; I recommend &lt;strong&gt;Daily&lt;/strong&gt;. Enter a preferred
execution time in 24 hour format based on your schedule; I run mine at 0400hrs
in the morning, everyday.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-07-10-3.png&quot; alt=&quot;DietPi Crontab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select Okay and &lt;strong&gt;Apply&lt;/strong&gt; on the cron home screen.&lt;/p&gt;

&lt;h3 id=&quot;raspberrypi-os&quot;&gt;RaspberryPi OS&lt;/h3&gt;

&lt;p&gt;On a Raspberry Pi OS, either use your own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crontab&lt;/code&gt; or root’s.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;crontab &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# In the crontab, enter the preferred schedule&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Similar to the execution on DietPi, I've setup the execution of the script at 0400hrs, everyday.&lt;/span&gt;
0 4 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /opt/Wireguard-Randomizer/./mullvad.sh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’re done.&lt;/p&gt;</content><author><name>ArcherN9</name></author><category term="Linux" /><category term="Mullvad" /><category term="Wireguard" /><category term="Networking" /><category term="RaspberryPi" /><summary type="html">In order to get identity hiding forward secrecy the suggestion is to have the client change its static pubkey often in order to de-link VPN sessions, in the event of a compromise of the server’s static private key. “Often” might be a time limit, a bandwidth limit, and events like reboot of the system, the app, new WiFi, new DHCP lease, or explicitly by the user. To provide the same properties as OpenVPN it should be enough to change pubkey every time the user does a connect/disconnect. u/j0n17</summary></entry><entry><title type="html">Route PiVPN client traffic via Mullvad</title><link href="https://archern9.github.io/posts/route-pivpn-traffic-via-mullvad/" rel="alternate" type="text/html" title="Route PiVPN client traffic via Mullvad" /><published>2020-06-28T22:23:21+08:00</published><updated>2021-07-18T21:05:33+08:00</updated><id>https://archern9.github.io/posts/route-pivpn-traffic-via-mullvad</id><content type="html" xml:base="https://archern9.github.io/posts/route-pivpn-traffic-via-mullvad/">&lt;p&gt;&lt;em&gt;Note: As of July 2021, this post is still accurate. However, considering
iptables has been deprecated and replacd with nftables (I think?), I plan to
re-write this post in the near future. In case it doesn’t, check the About Me
section to get in touch with me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post attempts to respond to enigmas similar to “How do I route my PiVPN
traffic through a commercial VPN?”. By the end of this guide, you should have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A working PiVPN installation; (With Wireguard)&lt;/li&gt;
  &lt;li&gt;A Mullvad VPN (With Wireguard) setup for use on multiple devices - Beyond the&lt;/li&gt;
  &lt;li&gt;five client limit imposed by their system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have used a fresh installation of DietPi on a Raspberry Pi Zero W (henceforth
referred to as DietPi) for this guide. The setup process is similar for all other
RaspberryPis and Raspberry Pi OS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This guide assumes you’re aware of PiVPN &amp;amp; its uses, have it installed on
the system and it functions as intended. For more information, I suggest going
through threads on Reddit and the official website first.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-one-verify-ipv4-packet-forwarding-is-enabled&quot;&gt;Step One: Verify ipv4 packet forwarding is enabled&lt;/h2&gt;

&lt;p&gt;IP forwarding is synonymous with routing and seldom referred to as ‘kernel IP
forwarding’ because it is a feature of the Linux kernel. A router has multiple
network interfaces; If traffic comes in from one interface that matches a subnet
of another network interface, a router then forwards that traffic to the other
network interface. This functionality is achieved by enabling ipv4 forwarding on
non-router devices. Refer &lt;a href=&quot;https://unix.stackexchange.com/questions/14056/what-is-kernel-ip-forwarding&quot;&gt;this&lt;/a&gt; for more information on this property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip&lt;/strong&gt;: Updating the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.ipv4.ip_forward&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/sys/net/ipv4&lt;/code&gt;
is a temporary gambit. I suggest using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysctl&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Check for the current ipv4 forwarding value; PiVPN enables it during installation;
In my experience, it does not sustain system reboots.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.ip_forward
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-two-creation-of-mullvad-wireguard-interfaces&quot;&gt;Step Two: Creation of Mullvad Wireguard interfaces&lt;/h2&gt;

&lt;p&gt;To create Mullvad Wireguard interfaces, we need to download the Mullvad Wireguard 
configuration file. Refer &lt;a href=&quot;https://mullvad.net/en/help/wireguard-and-mullvad-vpn/&quot;&gt;this guide&lt;/a&gt; but follow the steps below:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# This adds the Wireguard PPA repository to the system so Wireguard interfaces may be downloaded from the repository.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:wireguard/wireguard

&lt;span class=&quot;c&quot;&gt;# This installs some dependencies required to execute the Mullvad shell script that we'll use later&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;curl jq resolvconf raspberrypi-kernel-headers wireguard-dkms wireguard-tools

&lt;span class=&quot;c&quot;&gt;# This step is a stow-away suggestion and archival for the script&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/wireguard &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;mullvad-config &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mullvad-config

&lt;span class=&quot;c&quot;&gt;# Downloads the Mullvad Wireguard interface creation shell script. We shall modify this to our use case&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; https://mullvad.net/media/files/mullvad-wg.sh

&lt;span class=&quot;c&quot;&gt;# Use an editor of your choice to include PostUp and PreDown sections to the script&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano mullvad-wg.sh &lt;span class=&quot;c&quot;&gt;# Update Jul 2021: In hindsight, I wonder why did I use nano and not Neovim.&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I suggest you read through the mullvad-wg.sh shell script to better understand
the purpose. In the editor, search for the line that reads &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DNS=&quot;193.138.218.74&quot;&lt;/code&gt;
and replace it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DNS=&quot;x.x.x.x&quot;&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.x.x.x&lt;/code&gt; is your DietPi’s LAN IP. In
my case, I set it up as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DNS=&quot;192.168.1.100&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;for&lt;/strong&gt; loop that succeeds &lt;em&gt;“Writing WireGuard configuration files”&lt;/em&gt; is
responsible for creating individual Wireguard configuration files to connect to
Mullvad. Refer &lt;a href=&quot;https://www.youtube.com/watch?v=kQYQ_3ayz8w&quot;&gt;this video&lt;/a&gt; for more information on &lt;strong&gt;iptables&lt;/strong&gt; &amp;amp; modify the
section:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;...
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;CODE &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SERVER_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONFIGURATION_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/wireguard/mullvad-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.conf&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;umask &lt;/span&gt;077
        &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/wireguard/
        &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIGURATION_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIGURATION_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
                [Interface]
                PrivateKey = &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRIVATE_KEY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
                Address = &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ADDRESS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
                DNS = &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DNS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;

                # This section is executed when the wireguard interface is starting

                # Creates a new entry in the NAT table | For all packets that traverse through the out-interface mullvad-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;, MASQUERADE the packets with the PI's IP address
                PostUp = iptables --table nat --append POSTROUTING --out-interface mullvad-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; --source 0.0.0.0/0 --destination 0.0.0.0/0 -j MASQUERADE
                
                # Add a default route via the gateway on wlan0 interface for a routing table pivpn | All packets against the routing table pivpn will be routed through the defaul gateway
                PostUp = ip route add default via 192.168.1.1 dev wlan0 table pivpn
                
                # All packets with FwMark 51820 to be routed against table pivpn | This is an important step because Mullvad Wireguard configuration disallows any packets without a fwmark 51820 to be routed.
                PostUp = ip rule add fwmark 51820 table pivpn
                
                # OPTIONAL : If you need any ports open only from the Mullvad interface but not on wlan0, open a random port for wireguard on the Mullvad website and add it here
                PostUp = iptables --table filter -A INPUT --in-interface mullvad-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; -p udp --dport 2836 -j ACCEPT

                # This section is executed when the wireguard interface is shutting down
                
                # All PreDown steps are inverse of PostUp statements so as to logically close the temporary setup which lives only while a Mullvad interface is connected

                PreDown = iptables --table nat -D POSTROUTING --out-interface mullvad-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; --source 0.0.0.0/0 --destination 0.0.0.0/0 -j MASQUERADE
                PreDown = ip route delete default via 192.168.1.1 dev wlan0 table pivpn
                PreDown = ip rule delete fwmark 51820 table pivpn
                PreDown = iptables --table filter -D INPUT --in-interface mullvad-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; -p udp --dport 2836 -j ACCEPT

                [Peer]
                PublicKey = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SERVER_PUBLIC_KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
                Endpoint = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SERVER_ENDPOINTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CODE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
                AllowedIPs = 0.0.0.0/0, ::/0
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;        _EOF
&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIGURATION_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIGURATION_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: Ports from Mullvad may be opened
&lt;a href=&quot;https://mullvad.net/en/account/#/ports&quot;&gt;here&lt;/a&gt;. Save the script, exit and
execute.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x mullvad-wg.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./mullvad-wg.sh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you receive &lt;em&gt;“Please wait up to 60 seconds for your public key to be added to
the servers.”&lt;/em&gt; as the final output, it would imply your wireguard configurations
have been generated. Execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -lsa&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/wireguard&lt;/code&gt; directory to confirm.&lt;/p&gt;

&lt;h2 id=&quot;step-three-creation-of-pivpn-table&quot;&gt;Step Three: Creation of pivpn table&lt;/h2&gt;

&lt;p&gt;To satisfy the parameters added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostUp&lt;/code&gt; section in Mullvad configurations
and for them to function correctly, we shall create the pivpn routing table.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/iproute2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano rt_tables
&lt;span class=&quot;c&quot;&gt;# reserved values&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
255     &lt;span class=&quot;nb&quot;&gt;local
&lt;/span&gt;254     main
253     default
0       unspec
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# local&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1      inr.ruhep&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add a new entry at the end of this file. The ID of the table should be unique and can be any numeric value.&lt;/span&gt;
100     pivpn
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-four-verifying-newly-created-mullvad-interfaces&quot;&gt;Step Four: Verifying newly created Mullvad interfaces&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/wireguard&lt;/code&gt; and verify if a random Mullvad interface functions
as intended.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/wireguard
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg-quick up mullvad-ch4.conf

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip link add mullvad-ch4 type wireguard&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] wg setconf mullvad-ch4 /dev/fd/63&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -4 address add 10.67.235.185/32 dev mullvad-ch4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -6 address add fc00:bbbb:bbbb:bb01::4:ebb8/128 dev mullvad-ch4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip link set mtu 1420 up dev mullvad-ch4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] resolvconf -a tun.mullvad-ch4 -m 0 -x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] wg set mullvad-ch4 fwmark 51820&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -6 route add ::/0 dev mullvad-ch4 table 51820&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -6 rule add not fwmark 51820 table 51820&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -6 rule add table main suppress_prefixlength 0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip6tables-restore -n&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -4 route add 0.0.0.0/0 dev mullvad-ch4 table 51820&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -4 rule add not fwmark 51820 table 51820&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip -4 rule add table main suppress_prefixlength 0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] sysctl -q net.ipv4.conf.all.src_valid_mark=1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] iptables-restore -n&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] iptables --table nat --append POSTROUTING --out-interface mullvad-ch4 --source 0.0.0.0/0 --destination 0.0.0.0/0 -j MASQUERADE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip route add default via 192.168.1.1 dev wlan0 table pivpn&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] ip rule add fwmark 51820 table pivpn&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#] iptables --table filter -A INPUT --in-interface mullvad-ch4 -p udp --dport 2836 -j ACCEPT&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you see an output similar to the above, you have successfully connected to
Mullvad. Just to be sure, test the conection.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ip a
...
6: mullvad-ch4: &amp;lt;POINTOPOINT,NOARP,UP,LOWER_UP&amp;gt; mtu 1420 qdisc noqueue state UNKNOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/none 
    inet 10.67.235.185/32 scope global mullvad-ch4
       valid_lft forever preferred_lft forever
...

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://am.i.mullvad.net/connected
You are connected to Mullvad &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;server ch4-wireguard&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Your IP address is 45.12.222.236

&lt;span class=&quot;c&quot;&gt;# Close the Mullvad interface&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg-quick down mullvad-ch4.conf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg-quick down wg0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-five-add-a-fwmark-to-packets-incoming-from-pivpn&quot;&gt;Step Five: Add a FwMark to packets incoming from PiVPN&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/wireguard
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano wg0.conf

...
Address &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10.6.0.1/24
ListenPort &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 51820
FwMark &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 51820

&lt;span class=&quot;c&quot;&gt;### begin test-1 ###&lt;/span&gt;
...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bump both of the interfaces.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/wireguard
&lt;span class=&quot;c&quot;&gt;# Enable PiVPN&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg-quick up wg0

&lt;span class=&quot;c&quot;&gt;# Pick a random mullvad interface to test the connection&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wg-quick up mullvad-dk2.conf 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-six-verify-functionality-on-a-client-device&quot;&gt;Step Six: Verify functionality on a client device&lt;/h2&gt;

&lt;p&gt;If the PiVPN client has a terminal, access it and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; to verify:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://am.i.mullvad.net/connected
You are connected to Mullvad &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;server dk2-wireguard&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Your IP address is 45.129.56.201
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or open a browser, navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://duckduckgo.com/&lt;/code&gt; and search for “ip
address”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/mullvad_ipaddress.png&quot; alt=&quot;IP Address confirmation&quot; /&gt;&lt;/p&gt;</content><author><name>ArcherN9</name></author><category term="[&quot;Linux&quot;]" /><category term="Mullvad" /><category term="PiVPN" /><category term="Wireguard" /><category term="IPTables" /><category term="Routing" /><category term="Networking" /><category term="RaspberryPi" /><category term="Linux" /><summary type="html">Note: As of July 2021, this post is still accurate. However, considering iptables has been deprecated and replacd with nftables (I think?), I plan to re-write this post in the near future. In case it doesn’t, check the About Me section to get in touch with me.</summary></entry><entry><title type="html">Ingesting Unity assets at runtime</title><link href="https://archern9.github.io/posts/ingesting-asset-bundles-at-runtime/" rel="alternate" type="text/html" title="Ingesting Unity assets at runtime" /><published>2019-05-27T06:00:00+08:00</published><updated>2021-07-18T21:39:17+08:00</updated><id>https://archern9.github.io/posts/ingesting-asset-bundles-at-runtime</id><content type="html" xml:base="https://archern9.github.io/posts/ingesting-asset-bundles-at-runtime/">&lt;p&gt;The web is littered with blog posts, forums and code examples on how to achieve
this. Consume a unity asset - 3D Models, Images, videos at runtime. To download
these from a server and display them to the user, all during runtime. If you’ve
spent adequate time researching and have eventually arrived at this post,
the following are apparent :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Majority of the answers are over 2-3 years old; &lt;em&gt;(as of writing this)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Almost all of them use the deprecated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WWW&lt;/code&gt; class;&lt;/li&gt;
  &lt;li&gt;They all seem to work for the author and one odd person who responded, but not
you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-would-you-download-assets-at-runtime&quot;&gt;Why would you download assets at runtime?&lt;/h2&gt;

&lt;p&gt;Unity applications are bulky. Heck, very bulky. I created a simple application
with three 3D models and two scenes using using different Augmented Reality SDKs
which resulted in 50MB+ in APK size. The more complex your application becomes,
the more bloated your app size will be. To mitigate this problem, uploading
assets to a web server and downloading them at runtime to render whatever content
you want is preferable.&lt;/p&gt;

&lt;h2 id=&quot;what-does-not-work&quot;&gt;What does not work?&lt;/h2&gt;

&lt;p&gt;Uploading 3D Models like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fbx&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.obj&lt;/code&gt; and downloading them at runtime
attracts an overhead. Unity does not use these assets directly. In lay man terms,
Unity imports these objects, creates meshes &amp;amp; sub meshes, applies textures on
each of the submeshes, etc. All of this is done automatically when you import an
object into Unity. If you were to download these are runtime, all of the above
operations would have to be done manually. That’s just something we don’t want
to do. Not for our use case.&lt;/p&gt;

&lt;h2 id=&quot;enter-assetbundles&quot;&gt;Enter, AssetBundles&lt;/h2&gt;

&lt;p&gt;Asset bundles are containers that contain a map of all the objects you added to
an archive. Once you have an asset Bundle, you can look up Unity synthesized
objects within the archive and use them as you normally would. To create an asset
bundle, follow:&lt;/p&gt;

&lt;p&gt;To simplify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AssetBundle&lt;/code&gt; creation, we add an item to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Assets&lt;/code&gt; menu in the
editor. To do that, we create a new C# script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateAssetBundles.cs&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateAssetBundles&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Specifies where the menu item will appear&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MenuItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Assets/Build AssetBundles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BuildAllAssetBundles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The folder under which the asset would be generated | Create it if it doesn't exist&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Assets/AssetBundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// The AssetBundle that would be generated&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Assets/AssetBundle/myBundle.unity3d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// I've used build target as Android. You could change this if required.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetFiltered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectionMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeepAssets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BuildAssetBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;BuildAssetBundleOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CollectDependencies&lt;/span&gt;
                                     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildAssetBundleOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompleteAssets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once compiled, go to the project structure in the editor and select the 3D
object you would like to bundle in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AssetBundle&lt;/code&gt;. Go to Assets &amp;gt; Select
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build AssetBundles&lt;/code&gt;. Give it a few seconds to generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.unity3d&lt;/code&gt; file. Go to
your project structure and find the newly created folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AssetBundle&lt;/code&gt;. Inside,
you should be able to locate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myBundle.unity3d&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unity-assetbundles-asset file.png&quot; alt=&quot;unity Asset Bundle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t yet figured out how to access this bundle if it is kept a part of the
project. Please consider sending out an email if you have a solution to that.&lt;/p&gt;

&lt;p&gt;Now that we have the bundle, we need to host this on a server. You could upload
this anywhere you want. Though I did mine on Azure blob storage. The idea behind
this is to have a truly scalable solution. How to upload to bob storage is beyond
the scope of this post.&lt;/p&gt;

&lt;p&gt;Now that you have uploaded the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AssetBundle&lt;/code&gt; and have a URL against it, we can
get down to writing the code for it. The following is a very crude implementation.
You would have to modify this to be able to plug it in an actual application.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Use this for initialization&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;StartCoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Declare the URI where the 3D model is stored &lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PATH TO YOUR mybundle.unity3d file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    
    &lt;span class=&quot;c1&quot;&gt;// WWW is deprecated and a special class that inherits UnityWebRequest is already provided by Unity for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// specifically our purpose&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UnityWebRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityWebRequestAssetBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAssetBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    
    &lt;span class=&quot;c1&quot;&gt;// execute the web request&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendWebRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    
    &lt;span class=&quot;c1&quot;&gt;// DownloadHandlerAssetBundle extends DownloadHandler class so we don't have to worry about creating a class, extending it and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// taking care of the intricacies ourselves&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AssetBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DownloadHandlerAssetBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    
    &lt;span class=&quot;c1&quot;&gt;// If an AssetBundle object is returned, the code successfully loaded the asset. Now, we just have to traverse through the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// bundle hierarchy and locate our object. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is because Unity does not export only the 3D model. It exports all of its dependencies with it.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to load AssetBundle!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// This is not required in the actual program. I did this to figure out all assets stored inside this bundle.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The advantage is, you can figure out the hierarchy of the model and locate your prefab.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllAssetNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;c1&quot;&gt;// Load whichever GameObject you want to render on your application&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AndyObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;assets/scenes/stage/prefabs/andy.prefab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Feature image credits : &lt;a href=&quot;https://blog.cdw.com/&quot;&gt;cdw.com&lt;/a&gt;&lt;/p&gt;</content><author><name>ArcherN9</name></author><category term="[&quot;Unity&quot;]" /><category term="Unity" /><category term="Blob" /><category term="Augmented Reality" /><category term="Virtual Reality" /><category term="Mixed Reality" /><category term="3D Models" /><summary type="html">The web is littered with blog posts, forums and code examples on how to achieve this. Consume a unity asset - 3D Models, Images, videos at runtime. To download these from a server and display them to the user, all during runtime. If you’ve spent adequate time researching and have eventually arrived at this post, the following are apparent :</summary></entry><entry><title type="html">Execute UI Tests on App Center through APIs</title><link href="https://archern9.github.io/posts/executing-espress-test-cases-on-appcenter-through-API/" rel="alternate" type="text/html" title="Execute UI Tests on App Center through APIs" /><published>2018-06-09T18:00:00+08:00</published><updated>2021-07-18T21:05:33+08:00</updated><id>https://archern9.github.io/posts/executing-espress-test-cases-on-appcenter-through-API</id><content type="html" xml:base="https://archern9.github.io/posts/executing-espress-test-cases-on-appcenter-through-API/">&lt;p&gt;Visual Studio App center (VSAC) is great! It virtually eliminates the humongous
effort it usually requires to setup a DevOps pipeline. As an end user, I am
completely satisfied with what is on offer. As a developer trying to drive it
through APIs, its a nightmare!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why a nightmare?&lt;/strong&gt;
It’s because it had me stuck on a problem for upto 2 days that would have never
risen had there been proper documentation available. Albeit, they do have a
swagger notation website (&lt;a href=&quot;https://openapi.appcenter.ms/&quot;&gt;here&lt;/a&gt;) which attempts
to extensively document all aspects of rest APIs available. The platform is still
in its incessant development stage. I hope the documentation will become better
with time.&lt;/p&gt;

&lt;p&gt;Pro tip : Read the swagger notation in JSON and not the UI. The UI rendered
leaves out a lot of information. I suggest leveraging
&lt;a href=&quot;https://jsoneditoronline.org/&quot;&gt;Json Editor Online&lt;/a&gt; to make it human readable.&lt;/p&gt;

&lt;p&gt;This post aims to guide on executing Espresso tests on VSAC using rest APIs.
As of writing this post, the API version is tagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This article assumes you have carried out the following basic steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creating a user account;&lt;/li&gt;
  &lt;li&gt;Creating an organization;&lt;/li&gt;
  &lt;li&gt;Either signing up for a trial or have premium access to VSAC;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creating-a-test-series&quot;&gt;Creating a test series&lt;/h2&gt;

&lt;p&gt;A test series is a logical group that holds certain UI tests. They are used to
define the nature of UI tests that are executed under this group. To create a
new test series, execute the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.appcenter.ms/v0.1/apps/&amp;lt;organization_name&amp;gt;/&amp;lt;application_name&amp;gt;/test_series&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test_series_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Master New&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;master-new&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mostRecentActivity&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2018-06-09T13:19:23.395Z&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testRuns&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The API will generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slug&lt;/code&gt; for your test-series. This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slug&lt;/code&gt; is used to
refer to this test-series in suceeding calls.&lt;/p&gt;

&lt;h2 id=&quot;get-test-series&quot;&gt;Get test series&lt;/h2&gt;

&lt;p&gt;Check if the newly created series reflects on requesting for the entire set.
This API may also be used to get the number of tests executed per test-series
and their results.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.appcenter.ms/v0.1/apps/&amp;lt;organization_name&amp;gt;/&amp;lt;application_name&amp;gt;/test_series&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Master New&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;master-new&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mostRecentActivity&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2018-06-09T13:19:12.236Z&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testRuns&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Master&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mostRecentActivity&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2018-06-08T12:35:19.936Z&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;testRuns&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2018-06-08T12:35:19.936Z&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;statusDescription&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;executing-tests-on-vsac-is-a-four-step-process&quot;&gt;Executing tests on VSAC is a four step process&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First&lt;/strong&gt;: Creating a test run. This creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_run_id&lt;/code&gt; for you. Every
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_run_id&lt;/code&gt; has a state which may be retrieved from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/state&lt;/code&gt; end point.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second&lt;/strong&gt;:  Creating file hashes. This API is to intimate VSAC that you wish
to upload APKs for testing. For the platform to accept an upload, it needs to
know the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt; hashes of the files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Third&lt;/strong&gt;: Uploading the APKs as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fourth&lt;/strong&gt;: Executing the test&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;first--create-a-new-test-run&quot;&gt;First : Create a new test run&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.appcenter.ms/v0.1/apps/&amp;lt;organization_name&amp;gt;/&amp;lt;application_name&amp;gt;/test_runs&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Created&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/test_runs/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test_run_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the API does not respond with any body, neither the usual 200 HTTP status
code. Instead, you receieve a &lt;a href=&quot;https://httpstatuses.com/201&quot;&gt;201 HTTP statuscode&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;second-creating-file-hashes&quot;&gt;Second: Creating file hashes&lt;/h3&gt;

&lt;p&gt;To create a file hash, ensure you have successfully generated 2 APK files -
Build APK &amp;amp; an Android test APK that contains your Espresso test cases. To do
that, navigate to your Android project and execute the following&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./gradlew assembleDebug assembleAndroidTest
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The APKs will be generated in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/build/&lt;/code&gt; folder. To find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-1&lt;/code&gt; hash,
navigate to each of the folder that contains your APKs and execute:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;shasum &amp;lt;file-name&amp;gt;.apk

&lt;span class=&quot;c&quot;&gt;# Example output&lt;/span&gt;
4eb758d8d46da4711bb814ce6e6099c696411111  &amp;lt;file-name&amp;gt;.apk
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On executing each of the commands, the terminal will print a cryptic value.
These values will be used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/hashes/batch&lt;/code&gt; API.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.appcenter.ms/v0.1/apps/&amp;lt;organization_name&amp;gt;/&amp;lt;application_name&amp;gt;/test_runs/&amp;lt;test_run_id&amp;gt;/hashes/batch&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;file_type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app-file&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Specifies Build APK&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;checksum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;df798b4d07597db804546b8ca723780992811111&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Checksum for the build APK&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relative_path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app-debug.apk&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No need to give the entire path, just the file name is adequate&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Note : If key name 'relative_path' does not work, try 'relativePath'. &lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;file_type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test-file&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Specifies Build APK&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;checksum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4eb758d8d46da4711bb814ce6e6099c696411111&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Checksum for the test APK&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relative_path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app-debug-androidTest.apk&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No need to give the entire path, just the file name is adequate&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Note : If key name 'relative_path' does not work, try 'relativePath'.&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fileType&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app-file&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;checksum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;df798b4d07597db804546b8ca723780992811111&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app-debug.apk&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uploadStatus&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;412&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://testcloud.xamarin.com/v0.1/direct_uploads?token=&amp;lt;VSAC_generated_token_here&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fileType&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test-file&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;checksum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4eb758d8d46da4711bb814ce6e6099c696411111&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;app-debug-androidTest.apk&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uploadStatus&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;412&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://testcloud.xamarin.com/v0.1/direct_uploads?token=&amp;lt;VSAC_generated_token_here&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;third-uploading-the-apks&quot;&gt;Third: Uploading the APKs&lt;/h3&gt;

&lt;p&gt;The response of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/hashes/batch&lt;/code&gt; API carries a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt; key for each of the
files for which hashes have been submitted. This is the URL where the respective
APKs need to be uploaded. Ensure you upload each APK to their respective URLs.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//testcloud.xamarin.com/v0.1/direct_uploads?token=&amp;lt;VSAC_generated_token_here&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multipart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlencoded&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relative_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relative_path_of_APK_being_uploaded_as_received_in_previous_API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APK&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file_type&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileType_as_received_in_previous_API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Created&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you get HTTP status code 201 as a response for each of the files, you are set
to execute your test cases.&lt;/p&gt;

&lt;h3 id=&quot;fourth-execute-the-test-case&quot;&gt;Fourth: Execute the test case&lt;/h3&gt;

&lt;p&gt;To execute a test case, you need to specify which devices the test should run on.
To create a new device set, please refer VSAC’s swagger page. I created a set
from the portal. To specify a device, you need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;device_slug&lt;/code&gt; retrieved by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/device_sets&lt;/code&gt; end point.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.appcenter.ms/v0.1/apps/&amp;lt;organization_name&amp;gt;/&amp;lt;application_name&amp;gt;/owner/device_sets&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a7a0b57e-0d51-4129-9834-fe17ff5c0a63&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Galaxy Note&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;galaxy-note&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;osVersionCount&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;manufacturerCount&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Owner information },&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;deviceConfigurations&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;f243fd17-e403-43b7-af55-680d8cdf86b4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Device image URL },&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;7.1.1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;osName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Android 7.1.1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Model Information }&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a test run created, APK files uploaded &amp;amp; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;device_slug&lt;/code&gt; retrieved, we are
ready to execute it on Appcenter’s devices!&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//api.appcenter.ms/v0.1/apps/&amp;lt;organization_name&amp;gt;/&amp;lt;application_name&amp;gt;/test_runs/&amp;lt;test_run_id&amp;gt;/start&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_framework&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;espresso&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;device_selection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;organization_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;lt;device_slug&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;en_US&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_series&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; 		&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test_series_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_parameters&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//You may add custom test parameters here.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;accepted_devices&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Samsung Galaxy Note 8 (7.1.1)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rejected_devices&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you receieve a similar response from VSAC, congratulations! You have
successfully executed your UI test case through REST APIs! To confirm, you may
execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/state&lt;/code&gt; API or simply head over to VSAC to have a visual confirmation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/VSAC_Test_run.png&quot; alt=&quot;VSAC Visual confirmation&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;update-log&quot;&gt;Update Log&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;10th June : Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;device_sets&lt;/code&gt; API&lt;/li&gt;
&lt;/ol&gt;</content><author><name>ArcherN9</name></author><category term="[&quot;Android&quot;]" /><category term="AppCenter" /><category term="API" /><category term="Integrations" /><category term="UI Testing" /><summary type="html">Visual Studio App center (VSAC) is great! It virtually eliminates the humongous effort it usually requires to setup a DevOps pipeline. As an end user, I am completely satisfied with what is on offer. As a developer trying to drive it through APIs, its a nightmare!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://archern9.github.io/%7B%22src%22=%3E%22/assets/img/azure-featureimage.png%22%7D" /><media:content medium="image" url="https://archern9.github.io/%7B%22src%22=%3E%22/assets/img/azure-featureimage.png%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>